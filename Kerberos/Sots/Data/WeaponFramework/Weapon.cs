// Decompiled with JetBrains decompiler
// Type: Kerberos.Sots.Data.WeaponFramework.Weapon
// Assembly: sots2_managed, Version=2.0.25104.1, Culture=neutral, PublicKeyToken=null
// MVID: 7BEBB796-D765-47D7-AFD1-D31EAC2170CD
// Assembly location: D:\Games\Sword of the Stars II Enhanced Edition\bin\x86\sots2_managed.dll

using Kerberos.Sots.Data.Xml;
using System.Collections.Generic;
using System.Linq;
using System.Xml;

namespace Kerberos.Sots.Data.WeaponFramework
{
	public class Weapon
	{
		public string Name = "";
		public List<Tech> RequiredTech = new List<Tech>();
		public List<PassableShield> PassThroughShields = new List<PassableShield>();
		public List<Attribute> Attributes = new List<Attribute>();
		public List<Section> CompatibleSections = new List<Section>();
		public List<TurretClass> TurretClasses = new List<TurretClass>();
		public List<Section> DeployableSections = new List<Section>();
		public List<CompatibleFaction> CompatibleFactions = new List<CompatibleFaction>();
		public string PayloadType = "";
		public string PlagueType = "";
		public string WeaponSize = "";
		public string Animation = "";
		public string SubmunitionBlastType = "";
		public GridDescriptor PbGrid = new GridDescriptor();
		public GridDescriptor EffectiveGrid = new GridDescriptor();
		public GridDescriptor MaxGrid = new GridDescriptor();
		public MuzzleDescriptor MuzzleSize = new MuzzleDescriptor();
		public string Model = "";
		public string DecalMaterial = "TestDecal";
		public float DecalSize = 20f;
		public string MuzzleEffect = "";
		public string BuildupEffect = "";
		public string ImpactEffect = "";
		public string PlanetImpactEffect = "";
		public string BulletEffect = "";
		public string RicochetEffect = "";
		public string MuzzleSound = "";
		public string BuildupSound = "";
		public string ImpactSound = "";
		public string PlanetImpactSound = "";
		public string ExpireSound = "";
		public string BulletSound = "";
		public string RicochetSound = "";
		public string Icon = "";
		public RangeTable EffectiveRanges = new RangeTable();
		public float BaseRicochetModifier = -10f;
		public const float DefaultBaseRicochetModifier = -10f;
		private const string XmlNameName = "Name";
		private const string XmlRequiredTechsName = "RequiredTechnologies";
		private const string XmlTechName = "Technology";
		private const string XmlPassThroughShieldsGroupName = "PassableShields";
		private const string XmlShieldName = "Shield";
		private const string XmlAttributesName = "Attributes";
		private const string XmlAttributeName = "Attribute";
		private const string XmlCompatibleFactionsName = "CompatibleFactions";
		private const string XmlCompatibleSectionsName = "CompatibleSections";
		private const string XmlDeployableSectionsName = "DeployableSections";
		private const string XmlTurretClassesName = "TurretClasses";
		private const string XmlTurretClassName = "TurretClass";
		private const string XmlSectionName = "Section";
		private const string XmlFactionName = "Faction";
		private const string XmlPayloadTypeName = "PayloadType";
		private const string XmlPlagueTypeName = "PlagueType";
		private const string XmlWeaponSizeName = "WeaponSize";
		private const string XmlAnimationName = "Animation";
		private const string XmlAnimationDelayName = "AnimationDelay";
		private const string XmlCostName = "Cost";
		private const string XmlCrewName = "Crew";
		private const string XmlisCrewPerBankName = "CrewPerBank";
		private const string XmlPowerName = "Power";
		private const string XmlisPowerPerBankName = "PowerPerBank";
		private const string XmlSupplyName = "Supply";
		private const string XmlisSupplyPerBankName = "SupplyPerBank";
		private const string XmlSignatureName = "Signature";
		private const string XmlisSignaturePerBank = "SignaturePerBank";
		private const string XmlHpBonusName = "HpBonus";
		private const string XmlHealthName = "Health";
		private const string XmlTrackingSpeedName = "TrackingSpeed";
		private const string XmlTimeToLiveName = "TimeToLive";
		private const string XmlDumbfireTimeName = "DumbfireTime";
		private const string XmlCritHitBonusName = "CritHitBonus";
		private const string XmlMalfunctionPercentName = "MalfunctionPercent";
		private const string XmlMalfunctionDamageName = "MalfunctionDamage";
		private const string XmlSubweaponTypeName = "SubweaponType";
		private const string XmlIsVisible = "IsVisible";
		private const string XmlIsAbductor = "IsAbductor";
		private const string XmlDisruptorValue = "DisruptorValue";
		private const string XmlDrainValue = "DrainValue";
		private const string XmlDOT = "DOT";
		private const string XmlSubmunitionTypeName = "Submunition";
		private const string XmlExplosiveMinEffectRangeName = "ExplosiveMinEffectRange";
		private const string XmlExplosiveMaxEffectRangeName = "ExplosiveMaxEffectRange";
		private const string XmlDetonationRangeName = "DetonationRange";
		private const string XmlEMPRangeName = "EMPRange";
		private const string XmlEMPDurationName = "EMPDuration";
		private const string XmlArmorPiercingLevelName = "ArmorPiercingLevel";
		private const string XmlNumArcsName = "NumArcs";
		private const string XmlArcRangeName = "ArcRange";
		private const string XmlCritHitRollsName = "CritHitRolls";
		private const string XmlMaxGravityForceName = "MaxGravityForce";
		private const string XmlGravityAffectRangeName = "GravityAffectRange";
		private const string XmlSubmunitionAmountName = "SubmunitionAmount";
		private const string XmlSubmunitionBlastTypeName = "SubmunitionBlastType";
		private const string XmlSubmunitionConeDeviationName = "SubmunitionConeDeviation";
		private const string XmlPbGridDescriptorName = "PbGrid";
		private const string XmlEffectiveGridDescriptorName = "EffectiveGrid";
		private const string XmlMaxGridDescriptorName = "MaxGrid";
		private const string XmlTrackSpeedModifierName = "TrackSpeedModifier";
		private const string XmlBeamDamagePeriodName = "BeamDamagePeriod";
		private const string XmlVolleysName = "Volleys";
		private const string XmlVolleyPeriodName = "VolleyPeriod";
		private const string XmlVolleyDelayName = "VolleyDelay";
		private const string XmlBuildupDelayName = "BuildupDelay";
		private const string XmlBaseVolleyDeviationName = "BaseVolleyDeviationName";
		private const string XmlBaseRechargeTimeName = "BaseRechargeTime";
		private const string XmlMuzzleSpeedName = "MuzzleSpeed";
		private const string XmlShotAccelerationName = "ShotAcceleration";
		private const string XmlDurationName = "Duration";
		private const string XmlMuzzleDescriptorName = "MuzzleDescription";
		private const string XmlModelName = "Model";
		private const string XmlDecalMaterialName = "DecalMaterial";
		private const string XmlDecalSizeName = "DecalSize";
		private const string XmlMuzzleEffectName = "MuzzleEffect";
		private const string XmlBuildupEffectName = "BuildupEffect";
		private const string XmlImpactEffectName = "ImpactEffect";
		private const string XmlPlanetImpactEffectName = "PlanetImpactEffect";
		private const string XmlBulletEffectName = "BulletEffect";
		private const string XmlRicochetEffectName = "RicochetEffect";
		private const string XmlIsMuzzleEffectLoopingName = "isMuzzleEffectLooping";
		private const string XmlIsBuildupEffectLoopingName = "isBuildupEffectLooping";
		private const string XmlIsImpactEffectLoopingName = "isImpactEffectLooping";
		private const string XmlIsBulletEffectLoopingName = "isBulletEffectLooping";
		private const string XmlIsRicochetEffectLoopingName = "isRicochetEffectLooping";
		private const string XmlMuzzleSoundName = "MuzzleSound";
		private const string XmlBuildupSoundName = "BuildupSound";
		private const string XmlImpactSoundName = "ImpactSound";
		private const string XmlPlanetImpactSoundName = "PlanetImpactSound";
		private const string XmlExpireSoundName = "ExpireSound";
		private const string XmlBulletSoundName = "BulletSound";
		private const string XmlRicochetSoundName = "RicochetSound";
		private const string XmlIconName = "Icon";
		private const string XmlRangeName = "Range";
		private const string XmlRangeTableName = "RangeTable";
		private const string XmlBaseRicochetModifierName = "BaseRicochetModifier";
		private const string XmlRecoilFactorName = "RecoilFactor";
		private const string XmlRoundMassName = "RoundMass";
		private const string XmlPopDamageName = "PopDamage";
		private const string XmlInfraDamageName = "InfraDamage";
		private const string XmlTerraDamageName = "TerraDamage";
		private const string XmlSolutionToleranceName = "SolutionTolerance";
		private const string XmlRatingDamageEstimateName = "RatingDamageEstimate";
		private const string XmlRatingFiringRateName = "FiringRate";
		private const string XmlRatingAccuracyName = "Accuracy";
		private const string XmlRatingRangeName = "Range";
		public float AnimationDelay;
		public int Cost;
		public int Crew;
		public bool isCrewPerBank;
		public int Power;
		public bool isPowerPerBank;
		public int Supply;
		public bool isSupplyPerBank;
		public float Signature;
		public bool isSignaturePerBank;
		public float CritHitBonus;
		public float MalfunctionPercent;
		public float MalfunctionDamage;
		public string SubmunitionType;
		public string SubweaponType;
		public bool isVisible;
		public bool isAbductor;
		public int DisruptorValue;
		public int DrainValue;
		public float DOT;
		public float ExplosiveMinEffectRange;
		public float ExplosiveMaxEffectRange;
		public float DetonationRange;
		public float EMPRange;
		public float EMPDuration;
		public int ArmorPiercingLevel;
		public int NumArcs;
		public float ArcRange;
		public int CritHitRolls;
		public float MaxGravityForce;
		public float GravityAffectRange;
		public int SubmunitionAmount;
		public float SubmunitionConeDeviation;
		public int HpBonus;
		public float Health;
		public float TrackingSpeed;
		public float TimeToLive;
		public float DumbfireTime;
		public float TrackSpeedModifier;
		public float BeamDamagePeriod;
		public int Volleys;
		public float VolleyPeriod;
		public float VolleyDelay;
		public float BuildupDelay;
		public float BaseVolleyDeviation;
		public float BaseRechargeTime;
		public float MuzzleSpeed;
		public float ShotAcceleration;
		public float Duration;
		public bool isMuzzleEffectLooping;
		public bool isBuildupEffectLooping;
		public bool isBulletEffectLooping;
		public bool isImpactEffectLooping;
		public bool isRicochetEffectLooping;
		public float RecoilFactor;
		public float RoundMass;
		public float PopDamage;
		public float InfraDamage;
		public float TerraDamage;
		public float SolutionTolerance;
		public int RatingDamageEstimate;
		public int RatingFiringRate;
		public int RatingAccuracy;
		public int RatingRange;

		public string WeaponClass
		{
			get
			{
				TurretClass turretClass = this.TurretClasses.FirstOrDefault<TurretClass>();
				if (turretClass == null)
					return string.Empty;
				return turretClass.ActualTurretClass;
			}
		}

		public string XmlName
		{
			get
			{
				throw XmlHelper.NoXmlNameException;
			}
		}

		internal void AttachToXmlNode(ref XmlElement node)
		{
			XmlHelper.AddNode((object)this.Name, "Name", ref node);
			XmlHelper.AddObjectCollectionNode((IEnumerable<IXmlLoadSave>)this.PassThroughShields, "PassableShields", "Shield", ref node);
			XmlHelper.AddObjectCollectionNode((IEnumerable<IXmlLoadSave>)this.RequiredTech, "RequiredTechnologies", "Technology", ref node);
			XmlHelper.AddObjectCollectionNode((IEnumerable<IXmlLoadSave>)this.Attributes, "Attributes", "Attribute", ref node);
			XmlHelper.AddObjectCollectionNode((IEnumerable<IXmlLoadSave>)this.CompatibleSections, "CompatibleSections", "Section", ref node);
			XmlHelper.AddObjectCollectionNode((IEnumerable<IXmlLoadSave>)this.TurretClasses, "TurretClasses", "TurretClass", ref node);
			XmlHelper.AddObjectCollectionNode((IEnumerable<IXmlLoadSave>)this.DeployableSections, "DeployableSections", "Section", ref node);
			XmlHelper.AddObjectCollectionNode((IEnumerable<IXmlLoadSave>)this.CompatibleFactions, "CompatibleFactions", "Faction", ref node);
			XmlHelper.AddNode((object)this.PayloadType, "PayloadType", ref node);
			XmlHelper.AddNode((object)this.PlagueType, "PlagueType", ref node);
			XmlHelper.AddNode((object)this.WeaponSize, "WeaponSize", ref node);
			XmlHelper.AddNode((object)this.Animation, "Animation", ref node);
			XmlHelper.AddNode((object)this.AnimationDelay, "AnimationDelay", ref node);
			XmlHelper.AddNode((object)this.Cost, "Cost", ref node);
			XmlHelper.AddNode((object)this.Crew, "Crew", ref node);
			XmlHelper.AddNode((object)this.isCrewPerBank, "CrewPerBank", ref node);
			XmlHelper.AddNode((object)this.Power, "Power", ref node);
			XmlHelper.AddNode((object)this.isPowerPerBank, "PowerPerBank", ref node);
			XmlHelper.AddNode((object)this.Supply, "Supply", ref node);
			XmlHelper.AddNode((object)this.isSupplyPerBank, "SupplyPerBank", ref node);
			XmlHelper.AddNode((object)this.Signature, "Signature", ref node);
			XmlHelper.AddNode((object)this.isSignaturePerBank, "SignaturePerBank", ref node);
			XmlHelper.AddNode((object)this.HpBonus, "HpBonus", ref node);
			XmlHelper.AddNode((object)this.Health, "Health", ref node);
			XmlHelper.AddNode((object)this.TrackingSpeed, "TrackingSpeed", ref node);
			XmlHelper.AddNode((object)this.TimeToLive, "TimeToLive", ref node);
			XmlHelper.AddNode((object)this.DumbfireTime, "DumbfireTime", ref node);
			XmlHelper.AddNode((object)this.CritHitBonus, "CritHitBonus", ref node);
			XmlHelper.AddNode((object)this.MalfunctionPercent, "MalfunctionPercent", ref node);
			XmlHelper.AddNode((object)this.MalfunctionDamage, "MalfunctionDamage", ref node);
			XmlHelper.AddNode((object)this.SubweaponType, "SubweaponType", ref node);
			XmlHelper.AddNode((object)this.isVisible, "IsVisible", ref node);
			XmlHelper.AddNode((object)this.isAbductor, "IsAbductor", ref node);
			XmlHelper.AddNode((object)this.DisruptorValue, "DisruptorValue", ref node);
			XmlHelper.AddNode((object)this.DrainValue, "DrainValue", ref node);
			XmlHelper.AddNode((object)this.DOT, "DOT", ref node);
			XmlHelper.AddNode((object)this.SubmunitionType, "Submunition", ref node);
			XmlHelper.AddNode((object)this.SubmunitionAmount, "SubmunitionAmount", ref node);
			XmlHelper.AddNode((object)this.SubmunitionBlastType, "SubmunitionBlastType", ref node);
			XmlHelper.AddNode((object)this.SubmunitionConeDeviation, "SubmunitionConeDeviation", ref node);
			XmlHelper.AddNode((object)this.ExplosiveMinEffectRange, "ExplosiveMinEffectRange", ref node);
			XmlHelper.AddNode((object)this.ExplosiveMaxEffectRange, "ExplosiveMaxEffectRange", ref node);
			XmlHelper.AddNode((object)this.DetonationRange, "DetonationRange", ref node);
			XmlHelper.AddNode((object)this.EMPRange, "EMPRange", ref node);
			XmlHelper.AddNode((object)this.EMPDuration, "EMPDuration", ref node);
			XmlHelper.AddNode((object)this.ArmorPiercingLevel, "ArmorPiercingLevel", ref node);
			XmlHelper.AddNode((object)this.NumArcs, "NumArcs", ref node);
			XmlHelper.AddNode((object)this.ArcRange, "ArcRange", ref node);
			XmlHelper.AddNode((object)this.CritHitRolls, "CritHitRolls", ref node);
			XmlHelper.AddNode((object)this.MaxGravityForce, "MaxGravityForce", ref node);
			XmlHelper.AddNode((object)this.GravityAffectRange, "GravityAffectRange", ref node);
			XmlHelper.AddNode((IXmlLoadSave)this.PbGrid, "PbGrid", ref node);
			XmlHelper.AddNode((IXmlLoadSave)this.EffectiveGrid, "EffectiveGrid", ref node);
			XmlHelper.AddNode((IXmlLoadSave)this.MaxGrid, "MaxGrid", ref node);
			XmlHelper.AddNode((object)this.TrackSpeedModifier, "TrackSpeedModifier", ref node);
			XmlHelper.AddNode((object)this.BeamDamagePeriod, "BeamDamagePeriod", ref node);
			XmlHelper.AddNode((object)this.Volleys, "Volleys", ref node);
			XmlHelper.AddNode((object)this.VolleyPeriod, "VolleyPeriod", ref node);
			XmlHelper.AddNode((object)this.VolleyDelay, "VolleyDelay", ref node);
			XmlHelper.AddNode((object)this.BuildupDelay, "BuildupDelay", ref node);
			XmlHelper.AddNode((object)this.BaseVolleyDeviation, "BaseVolleyDeviationName", ref node);
			XmlHelper.AddNode((object)this.BaseRechargeTime, "BaseRechargeTime", ref node);
			XmlHelper.AddNode((object)this.MuzzleSpeed, "MuzzleSpeed", ref node);
			XmlHelper.AddNode((object)this.ShotAcceleration, "ShotAcceleration", ref node);
			XmlHelper.AddNode((object)this.Duration, "Duration", ref node);
			XmlHelper.AddNode((IXmlLoadSave)this.MuzzleSize, "MuzzleDescription", ref node);
			XmlHelper.AddNode((object)this.Model, "Model", ref node);
			XmlHelper.AddNode((object)this.DecalMaterial, "DecalMaterial", ref node);
			XmlHelper.AddNode((object)this.DecalSize, "DecalSize", ref node);
			XmlHelper.AddNode((object)this.MuzzleEffect, "MuzzleEffect", ref node);
			XmlHelper.AddNode((object)this.BuildupEffect, "BuildupEffect", ref node);
			XmlHelper.AddNode((object)this.ImpactEffect, "ImpactEffect", ref node);
			XmlHelper.AddNode((object)this.PlanetImpactEffect, "PlanetImpactEffect", ref node);
			XmlHelper.AddNode((object)this.BulletEffect, "BulletEffect", ref node);
			XmlHelper.AddNode((object)this.RicochetEffect, "RicochetEffect", ref node);
			XmlHelper.AddNode((object)this.isMuzzleEffectLooping, "isMuzzleEffectLooping", ref node);
			XmlHelper.AddNode((object)this.isBuildupEffectLooping, "isBuildupEffectLooping", ref node);
			XmlHelper.AddNode((object)this.isBulletEffectLooping, "isBulletEffectLooping", ref node);
			XmlHelper.AddNode((object)this.isImpactEffectLooping, "isImpactEffectLooping", ref node);
			XmlHelper.AddNode((object)this.isRicochetEffectLooping, "isRicochetEffectLooping", ref node);
			XmlHelper.AddNode((object)this.MuzzleSound, "MuzzleSound", ref node);
			XmlHelper.AddNode((object)this.BuildupSound, "BuildupSound", ref node);
			XmlHelper.AddNode((object)this.ImpactSound, "ImpactSound", ref node);
			XmlHelper.AddNode((object)this.PlanetImpactSound, "PlanetImpactSound", ref node);
			XmlHelper.AddNode((object)this.ExpireSound, "ExpireSound", ref node);
			XmlHelper.AddNode((object)this.BulletSound, "BulletSound", ref node);
			XmlHelper.AddNode((object)this.RicochetSound, "RicochetSound", ref node);
			XmlHelper.AddNode((object)this.Icon, "Icon", ref node);
			XmlHelper.AddNode((IXmlLoadSave)this.EffectiveRanges, "RangeTable", ref node);
			XmlHelper.AddNode((object)this.BaseRicochetModifier, "BaseRicochetModifier", ref node);
			XmlHelper.AddNode((object)this.RecoilFactor, "RecoilFactor", ref node);
			XmlHelper.AddNode((object)this.RoundMass, "RoundMass", ref node);
			XmlHelper.AddNode((object)this.PopDamage, "PopDamage", ref node);
			XmlHelper.AddNode((object)this.InfraDamage, "InfraDamage", ref node);
			XmlHelper.AddNode((object)this.TerraDamage, "TerraDamage", ref node);
			XmlHelper.AddNode((object)this.SolutionTolerance, "SolutionTolerance", ref node);
			XmlHelper.AddNode((object)this.RatingDamageEstimate, "RatingDamageEstimate", ref node);
			XmlHelper.AddNode((object)this.RatingFiringRate, "FiringRate", ref node);
			XmlHelper.AddNode((object)this.RatingAccuracy, "Accuracy", ref node);
			XmlHelper.AddNode((object)this.RatingRange, "Range", ref node);
		}

		internal void LoadFromXmlNode(XmlElement node)
		{
			this.Name = XmlHelper.GetData<string>(node, "Name");
			this.PassThroughShields = XmlHelper.GetDataObjectCollection<PassableShield>(node, "PassableShields", "Shield");
			this.RequiredTech = XmlHelper.GetDataObjectCollection<Tech>(node, "RequiredTechnologies", "Technology");
			this.Attributes = XmlHelper.GetDataObjectCollection<Attribute>(node, "Attributes", "Attribute");
			this.CompatibleSections = XmlHelper.GetDataObjectCollection<Section>(node, "CompatibleSections", "Section");
			this.TurretClasses = XmlHelper.GetDataObjectCollection<TurretClass>(node, "TurretClasses", "TurretClass");
			this.DeployableSections = XmlHelper.GetDataObjectCollection<Section>(node, "DeployableSections", "Section");
			this.CompatibleFactions = XmlHelper.GetDataObjectCollection<CompatibleFaction>(node, "CompatibleFactions", "Faction");
			this.PayloadType = XmlHelper.GetData<string>(node, "PayloadType");
			this.PlagueType = XmlHelper.GetData<string>(node, "PlagueType");
			this.WeaponSize = XmlHelper.GetData<string>(node, "WeaponSize");
			this.Animation = XmlHelper.GetData<string>(node, "Animation");
			this.AnimationDelay = XmlHelper.GetData<float>(node, "AnimationDelay");
			this.Cost = XmlHelper.GetData<int>(node, "Cost");
			this.Crew = XmlHelper.GetData<int>(node, "Crew");
			this.isCrewPerBank = XmlHelper.GetData<bool>(node, "CrewPerBank");
			this.Power = XmlHelper.GetData<int>(node, "Power");
			this.isPowerPerBank = XmlHelper.GetData<bool>(node, "PowerPerBank");
			this.Supply = XmlHelper.GetData<int>(node, "Supply");
			this.isSupplyPerBank = XmlHelper.GetData<bool>(node, "SupplyPerBank");
			this.Signature = XmlHelper.GetData<float>(node, "Signature");
			this.isSignaturePerBank = XmlHelper.GetData<bool>(node, "SignaturePerBank");
			this.HpBonus = XmlHelper.GetData<int>(node, "HpBonus");
			this.Health = XmlHelper.GetData<float>(node, "Health");
			this.TrackingSpeed = XmlHelper.GetData<float>(node, "TrackingSpeed");
			this.TimeToLive = XmlHelper.GetData<float>(node, "TimeToLive");
			this.DumbfireTime = XmlHelper.GetData<float>(node, "DumbfireTime");
			this.CritHitBonus = XmlHelper.GetData<float>(node, "CritHitBonus");
			this.MalfunctionPercent = XmlHelper.GetData<float>(node, "MalfunctionPercent");
			this.MalfunctionDamage = XmlHelper.GetData<float>(node, "MalfunctionDamage");
			this.SubweaponType = XmlHelper.GetData<string>(node, "SubweaponType");
			this.isVisible = XmlHelper.GetDataOrDefault<bool>(node["IsVisible"], true);
			this.isAbductor = XmlHelper.GetDataOrDefault<bool>(node["IsAbductor"], false);
			this.DisruptorValue = XmlHelper.GetData<int>(node, "DisruptorValue");
			this.DrainValue = XmlHelper.GetData<int>(node, "DrainValue");
			this.DOT = XmlHelper.GetData<float>(node, "DOT");
			this.SubmunitionType = XmlHelper.GetData<string>(node, "Submunition");
			this.SubmunitionAmount = XmlHelper.GetData<int>(node, "SubmunitionAmount");
			this.SubmunitionBlastType = XmlHelper.GetData<string>(node, "SubmunitionBlastType");
			this.SubmunitionConeDeviation = XmlHelper.GetData<float>(node, "SubmunitionConeDeviation");
			this.ExplosiveMinEffectRange = XmlHelper.GetData<float>(node, "ExplosiveMinEffectRange");
			this.ExplosiveMaxEffectRange = XmlHelper.GetData<float>(node, "ExplosiveMaxEffectRange");
			this.DetonationRange = XmlHelper.GetData<float>(node, "DetonationRange");
			this.EMPRange = XmlHelper.GetData<float>(node, "EMPRange");
			this.EMPDuration = XmlHelper.GetData<float>(node, "EMPDuration");
			this.ArmorPiercingLevel = XmlHelper.GetData<int>(node, "ArmorPiercingLevel");
			this.NumArcs = XmlHelper.GetData<int>(node, "NumArcs");
			this.ArcRange = XmlHelper.GetData<float>(node, "ArcRange");
			this.CritHitRolls = XmlHelper.GetData<int>(node, "CritHitRolls");
			this.MaxGravityForce = XmlHelper.GetData<float>(node, "MaxGravityForce");
			this.GravityAffectRange = XmlHelper.GetData<float>(node, "GravityAffectRange");
			this.PbGrid.LoadFromXmlNode(node["PbGrid"]);
			this.EffectiveGrid.LoadFromXmlNode(node["EffectiveGrid"]);
			this.MaxGrid.LoadFromXmlNode(node["MaxGrid"]);
			this.TrackSpeedModifier = XmlHelper.GetData<float>(node, "TrackSpeedModifier");
			this.BeamDamagePeriod = XmlHelper.GetData<float>(node, "BeamDamagePeriod");
			this.Volleys = XmlHelper.GetData<int>(node, "Volleys");
			this.VolleyPeriod = XmlHelper.GetData<float>(node, "VolleyPeriod");
			this.VolleyDelay = XmlHelper.GetData<float>(node, "VolleyDelay");
			this.BuildupDelay = XmlHelper.GetData<float>(node, "BuildupDelay");
			this.BaseVolleyDeviation = XmlHelper.GetData<float>(node, "BaseVolleyDeviationName");
			this.BaseRechargeTime = XmlHelper.GetData<float>(node, "BaseRechargeTime");
			this.MuzzleSpeed = XmlHelper.GetData<float>(node, "MuzzleSpeed");
			this.ShotAcceleration = XmlHelper.GetData<float>(node, "ShotAcceleration");
			this.Duration = XmlHelper.GetData<float>(node, "Duration");
			this.MuzzleSize.LoadFromXmlNode(node["MuzzleDescription"]);
			this.Model = XmlHelper.GetData<string>(node, "Model");
			this.DecalMaterial = XmlHelper.GetDataOrDefault<string>(node["DecalMaterial"], this.DecalMaterial);
			this.DecalSize = XmlHelper.GetDataOrDefault<float>(node["DecalSize"], this.DecalSize);
			this.MuzzleEffect = XmlHelper.GetData<string>(node, "MuzzleEffect");
			this.BuildupEffect = XmlHelper.GetData<string>(node, "BuildupEffect");
			this.ImpactEffect = XmlHelper.GetData<string>(node, "ImpactEffect");
			this.PlanetImpactEffect = XmlHelper.GetData<string>(node, "PlanetImpactEffect");
			this.BulletEffect = XmlHelper.GetData<string>(node, "BulletEffect");
			this.RicochetEffect = XmlHelper.GetData<string>(node, "RicochetEffect");
			this.isMuzzleEffectLooping = XmlHelper.GetData<bool>(node, "isMuzzleEffectLooping");
			this.isBuildupEffectLooping = XmlHelper.GetData<bool>(node, "isBuildupEffectLooping");
			this.isImpactEffectLooping = XmlHelper.GetData<bool>(node, "isImpactEffectLooping");
			this.isBulletEffectLooping = XmlHelper.GetData<bool>(node, "isBulletEffectLooping");
			this.isRicochetEffectLooping = XmlHelper.GetData<bool>(node, "isRicochetEffectLooping");
			this.MuzzleSound = XmlHelper.GetData<string>(node, "MuzzleSound");
			this.BuildupSound = XmlHelper.GetData<string>(node, "BuildupSound");
			this.ImpactSound = XmlHelper.GetData<string>(node, "ImpactSound");
			this.PlanetImpactSound = XmlHelper.GetData<string>(node, "PlanetImpactSound");
			this.ExpireSound = XmlHelper.GetData<string>(node, "ExpireSound");
			this.BulletSound = XmlHelper.GetData<string>(node, "BulletSound");
			this.RicochetSound = XmlHelper.GetData<string>(node, "RicochetSound");
			this.Icon = XmlHelper.GetData<string>(node, "Icon");
			this.EffectiveRanges.LoadFromXmlNode(node["RangeTable"]);
			this.BaseRicochetModifier = XmlHelper.GetDataOrDefault<float>(node["BaseRicochetModifier"], -10f);
			this.RecoilFactor = XmlHelper.GetData<float>(node, "RecoilFactor");
			this.RoundMass = XmlHelper.GetData<float>(node, "RoundMass");
			this.PopDamage = XmlHelper.GetData<float>(node, "PopDamage");
			this.InfraDamage = XmlHelper.GetData<float>(node, "InfraDamage");
			this.TerraDamage = XmlHelper.GetData<float>(node, "TerraDamage");
			this.SolutionTolerance = XmlHelper.GetData<float>(node, "SolutionTolerance");
			this.RatingDamageEstimate = XmlHelper.GetData<int>(node, "RatingDamageEstimate");
			this.RatingFiringRate = XmlHelper.GetData<int>(node, "FiringRate");
			this.RatingAccuracy = XmlHelper.GetData<int>(node, "Accuracy");
			this.RatingRange = XmlHelper.GetData<int>(node, "Range");
		}
	}
}
